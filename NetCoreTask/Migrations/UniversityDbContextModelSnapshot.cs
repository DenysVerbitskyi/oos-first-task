// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreTask.DataBase;

#nullable disable

namespace NetCoreTask.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    partial class UniversityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseName = "OOP",
                            Description = "Object-Oriented Programming",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseName = "Patterns",
                            Description = "design patterns",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseName = "Entity",
                            Description = "Entity Framework",
                            TeacherId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseName = "Data types",
                            Description = "Value and reference types",
                            TeacherId = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseName = "GC",
                            Description = "Garbage collector",
                            TeacherId = 5
                        });
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.StudentCoursesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 3,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 3,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 4,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 4,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 5,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 5,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 5,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 5,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.StudentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTimeOffset(new DateTime(1991, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Ivan",
                            LastName = "Petrenko"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTimeOffset(new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Oles",
                            LastName = "Kurko"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTimeOffset(new DateTime(1993, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Pavlo",
                            LastName = "Skoropadskiy"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTimeOffset(new DateTime(1994, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Bohdan",
                            LastName = "Khmelnitskiy"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTimeOffset(new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Ivan",
                            LastName = "Bohun"
                        });
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.TeacherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "1@gmail.com",
                            FirstName = "Maria",
                            LastName = "Oslova"
                        },
                        new
                        {
                            Id = 2,
                            Email = "2@gmail.com",
                            FirstName = "Olha",
                            LastName = "Chorna"
                        },
                        new
                        {
                            Id = 3,
                            Email = "3@gmail.com",
                            FirstName = "Danylo",
                            LastName = "Honcharenko"
                        },
                        new
                        {
                            Id = 4,
                            Email = "4@gmail.com",
                            FirstName = "Alex",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 5,
                            Email = "5@gmail.com",
                            FirstName = "John",
                            LastName = "Tarasenko"
                        });
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.CourseEntity", b =>
                {
                    b.HasOne("NetCoreTask.DataBase.Entities.TeacherEntity", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.StudentCoursesEntity", b =>
                {
                    b.HasOne("NetCoreTask.DataBase.Entities.CourseEntity", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetCoreTask.DataBase.Entities.StudentEntity", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.CourseEntity", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.StudentEntity", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("NetCoreTask.DataBase.Entities.TeacherEntity", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
